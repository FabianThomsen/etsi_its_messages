#pragma once

#include <etsi_its_{{ etsi_type }}_coding/{{ t_name }}.h>
{# TODO: will add duplicate includes, e.g., for ClosedLanes -#}
{% for member in members -%}
{% if member.is_primitive -%}
#include <etsi_its_{{ etsi_type }}_conversion/primitives/convert{{ member.asn1_type }}.h>
{% else -%}
#include <etsi_its_{{ etsi_type }}_conversion/convert{{ member.type }}.h>
{% endif -%}
{% endfor -%}
#include <etsi_its_{{ etsi_type }}_msgs/{{ t_name }}.h>


namespace etsi_its_{{ etsi_type }}_conversion {

void toRos_{{ t_name }}(const {{ t_name }}_t& in, etsi_its_{{ etsi_type }}_msgs::{{ t_name }}& out) {
{% for member in members -%}
{% if member.optional %}
  if (in.{{ member.name }}) {
{%- if member.is_primitive %}
    toRos_{{ member.asn1_type }}(*in.{{ member.name }}, out.{{ member.name }});
{%- else %}
    toRos_{{ member.type }}(*in.{{ member.name }}, out.{{ member.name }});
{%- endif %}
    out.{{ member.name }}_is_present = true;
  }
{% else %}
{%- if member.is_primitive %}
  toRos_{{ member.asn1_type }}(in.{{ member.name }}, out.{{ member.name }});
{%- else %}
  toRos_{{ member.type }}(in.{{ member.name }}, out.{{ member.name }});
{%- endif -%}
{%- endif -%}
{% endfor %}
}

void toStruct_{{ t_name }}(const etsi_its_{{ etsi_type }}_msgs::{{ t_name }}& in, {{ t_name }}_t& out) {
    
  memset(&out, 0, sizeof({{ t_name }}_t));
{% for member in members -%}
{% if member.optional %}
  if (in.{{ member.name }}_is_present) {
{%- if member.is_primitive %}
    {{ member.asn1_type }}_t {{ member.name }};
    toStruct_{{ member.asn1_type }}(in.{{ member.name }}, {{ member.name }});
    out.{{ member.name }} = new {{ member.asn1_type }}_t({{ member.name }});
{%- else %}
    {{ member.type }}_t {{ member.name }};
    toStruct_{{ member.type }}(in.{{ member.name }}, {{ member.name }});
    out.{{ member.name }} = new {{ member.type }}_t({{ member.name }});
{%- endif %}
  }
{% else %}
{%- if member.is_primitive %}
  toStruct_{{ member.asn1_type }}(in.{{ member.name }}, out.{{ member.name }});
{%- else %}
  toStruct_{{ member.type }}(in.{{ member.name }}, out.{{ member.name }});
{%- endif -%}
{%- endif -%}
{% endfor %}
}

}
