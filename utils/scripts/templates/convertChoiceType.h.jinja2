#pragma once

#include <etsi_its_{{ etsi_type }}_coding/{{ t_name }}.h>
{% for member in members -%}
{%- if member.name != "choice" -%}
#include <etsi_its_{{ etsi_type }}_conversion/convert{{ member.type }}.h>
{% endif %}
{%- endfor -%}
#include <etsi_its_{{ etsi_type }}_msgs/{{ t_name }}.h>


namespace etsi_its_{{ etsi_type }}_conversion {

void toRos_{{ t_name }}(const {{ t_name }}_t& in, etsi_its_{{ etsi_type }}_msgs::{{ t_name }}& out) {
{% for member in members %}
{%- if member.name != "choice" -%}
{% for const in member.constants %}
  if (in.present == {{ t_name }}_PR::{{ t_name }}_PR_{{ member.name_cc }}) {
    toRos_{{ member.type }}(in.choice.{{ member.name_cc }}, out.{{ member.name }});
    out.choice = etsi_its_{{ etsi_type }}_msgs::{{ t_name }}::{{ const.name }};
  }
{%- endfor %}
{% endif %}
{%- endfor -%}
}

void toStruct_{{ t_name }}(const etsi_its_{{ etsi_type }}_msgs::{{ t_name }}& in, {{ t_name }}_t& out) {
    
  memset(&out, 0, sizeof({{ t_name }}_t));
{% for member in members %}
{%- if member.name != "choice" -%}
{% for const in member.constants %}
  if (in.choice == etsi_its_{{ etsi_type }}_msgs::{{ t_name }}::{{ const.name }}) {
    toStruct_{{ member.type }}(in.{{ member.name }}, out.choice.{{ member.name_cc }});
    out.present = {{ t_name }}_PR::{{ t_name }}_PR_{{ member.name_cc }};
  }
{%- endfor %}
{% endif %}
{%- endfor %}
}

}
